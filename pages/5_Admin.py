import streamlit as st
from sqlalchemy import text
import os, sys

# ‚úÖ ‡∏î‡∏∂‡∏á auth_utils.py ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from auth_utils import engine, insert_user_log

st.set_page_config(page_title="üõ°Ô∏è Admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

st.markdown("""
<style>
/* --- Main Background --- */
.stApp {
    background: linear-gradient(135deg, #726bca 0%, #d1d8fd 50%, #5aa0f7 100%) !important;
}
/* --- Sidebar Background --- */
section[data-testid="stSidebar"] {
    background: linear-gradient(120deg, #43168d 0%, #273585 70%, #3e87f7 100%) !important;
    min-width: 250px !important;
    border-right: 3px solid #7a4cff22;
    box-shadow: 8px 0 24px -16px #20206044;
}
/* --- Sidebar Text --- */
section[data-testid="stSidebar"] * {
    color: #fff !important;
    font-size: 18px !important;
}
section[data-testid="stSidebar"] a:hover {
    color: #ffe268 !important;
}
/* --- Sidebar Active --- */
section[data-testid="stSidebar"] .css-17lntkn,
section[data-testid="stSidebar"] .css-1v0mbdj,
section[data-testid="stSidebar"] .css-1c7y2kd,
section[data-testid="stSidebar"] .css-16idsys {
    background-color: #7a4cff !important;
    color: #ffe268 !important;
    font-weight: bold !important;
    border-radius: 8px !important;
}
</style>
""", unsafe_allow_html=True)

# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
if st.session_state.get("role") != "admin":
    st.error("üö´ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)")
    st.stop()

# Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
insert_user_log(st.session_state["user"], "view_admin")

st.markdown("## üõ°Ô∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

# ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
def load_users():
    with engine.connect() as conn:
        result = conn.execute(text("""
            SELECT id, username, email, role, is_confirmed, created_at
            FROM users ORDER BY created_at DESC
        """)).fetchall()
        return result

users = load_users()

# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
if users:
    for u in users:
        with st.expander(f"üë§ {u.username} ({u.role})"):
            st.write("üìß", u.email)
            st.write("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡πâ‡∏ß:", "‡πÉ‡∏ä‡πà" if u.is_confirmed else "‡∏¢‡∏±‡∏á")
            st.write("üïí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠:", u.created_at)

            col1, col2 = st.columns(2)
            with col1:
                if st.button(f"‚ùå ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ {u.username}", key=f"del_{u.id}"):
                    with engine.begin() as conn:
                        conn.execute(text("DELETE FROM users WHERE id = :id"), {"id": u.id})
                    st.success(f"‚úÖ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {u.username} ‡πÅ‡∏•‡πâ‡∏ß")
                    insert_user_log(st.session_state["user"], f"delete_user: {u.username}")
                    st.experimental_rerun()
            with col2:
                new_role = st.selectbox("üë§ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", ["user", "admin"], index=["user", "admin"].index(u.role), key=f"role_{u.id}")
                if new_role != u.role:
                    if st.button(f"üíº ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô {new_role}", key=f"rolebtn_{u.id}"):
                        with engine.begin() as conn:
                            conn.execute(
                                text("UPDATE users SET role = :r WHERE id = :id"),
                                {"r": new_role, "id": u.id}
                            )
                        st.success(f"üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á {u.username} ‡πÄ‡∏õ‡πá‡∏ô {new_role}")
                        insert_user_log(st.session_state["user"], f"change_role: {u.username} to {new_role}")
                        st.experimental_rerun()
else:
    st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
