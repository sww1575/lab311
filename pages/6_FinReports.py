import streamlit as st
import pandas as pd
from sqlalchemy import create_engine
import plotly.express as px
from io import BytesIO
from fpdf import FPDF

# ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì)
engine = create_engine("postgresql+psycopg2://postgres:12345678@localhost:5432/postgres")

st.markdown("""
<style>
/* --- Main Background --- */
.stApp {
    background: linear-gradient(135deg, #726bca 0%, #d1d8fd 50%, #5aa0f7 100%) !important;
}
/* --- Sidebar Background --- */
section[data-testid="stSidebar"] {
    background: linear-gradient(120deg, #43168d 0%, #273585 70%, #3e87f7 100%) !important;
    min-width: 250px !important;
    border-right: 3px solid #7a4cff22;
    box-shadow: 8px 0 24px -16px #20206044;
}
/* --- Sidebar Text --- */
section[data-testid="stSidebar"] * {
    color: #fff !important;
    font-size: 18px !important;
}
section[data-testid="stSidebar"] a:hover {
    color: #ffe268 !important;
}
/* --- Sidebar Active --- */
section[data-testid="stSidebar"] .css-17lntkn,
section[data-testid="stSidebar"] .css-1v0mbdj,
section[data-testid="stSidebar"] .css-1c7y2kd,
section[data-testid="stSidebar"] .css-16idsys {
    background-color: #7a4cff !important;
    color: #ffe268 !important;
    font-weight: bold !important;
    border-radius: 8px !important;
}
</style>
""", unsafe_allow_html=True)

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á VHAB1
@st.cache_data
def load_data():
    df = pd.read_sql('SELECT * FROM "VHAB1";', engine)

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Period (‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
    df["Period"] = pd.to_datetime(df["Year"].astype(str) + "-" + df["Month"].astype(str) + "-01", errors="coerce")

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á MonthYear ‡πÅ‡∏•‡∏∞ SortKey ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á
    df["MonthYear"] = df["Period"].dt.strftime("%b%Y")
    df["SortKey"] = df["Period"].dt.year * 100 + df["Period"].dt.month

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì GP ‡πÅ‡∏•‡∏∞ GP%
    if "Sales_Income" in df.columns and "CGS" in df.columns:
        df["GP"] = df["Sales_Income"] - df["CGS"]
        df["GP_percent"] = (df["GP"] / df["Sales_Income"]) * 100

    return df

df = load_data()

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ session_state (‡πÑ‡∏ß‡πâ **‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏° UI** ‡πÄ‡∏™‡∏°‡∏≠)
if "year_select" not in st.session_state:
    st.session_state.year_select = []
if "month_select" not in st.session_state:
    st.session_state.month_select = []
if "dept_select" not in st.session_state:
    st.session_state.dept_select = []
if "type_select" not in st.session_state:
    st.session_state.type_select = []
if "submit_clicked" not in st.session_state:
    st.session_state.submit_clicked = False


st.title("    üìä Business Performance")


# ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
if "user" not in st.session_state:
    st.error("üö´ ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô")
    
    st.markdown("[‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login](Login)")
    
    st.stop()

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
st.success(f"üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì {st.session_state['user']}")

# ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏î Submit ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
if not st.session_state.get("submit_clicked", False):
    st.warning("Please select filters and click Submit to view the report.")

with st.sidebar:
    st.markdown("# üîç Filters")

    year_select = st.multiselect("YEAR", sorted(df["Year"].dropna().unique(), reverse=True))
    month_select = st.multiselect("MONTH", sorted(df["Month"].dropna().unique()))
    dept_select = st.multiselect("DEPARTMENT", sorted(df["Dept_Code"].dropna().unique()))
    type_select = st.multiselect("TYPE", sorted(df["Type"].dropna().unique()))

    # ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Submit
    if st.button("Submit"):
        st.session_state.year_select = year_select
        st.session_state.month_select = month_select
        st.session_state.dept_select = dept_select
        st.session_state.type_select = type_select
        st.session_state.submit_clicked = True

# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î Submit ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
if st.session_state.get("submit_clicked", False):
    df_filtered = df.copy()

    if st.session_state.year_select:
        df_filtered = df_filtered[df_filtered["Year"].isin(st.session_state.year_select)]
    if st.session_state.month_select:
        df_filtered = df_filtered[df_filtered["Month"].isin(st.session_state.month_select)]
    if st.session_state.dept_select:
        df_filtered = df_filtered[df_filtered["Dept_Code"].isin(st.session_state.dept_select)]
    if st.session_state.type_select:
        df_filtered = df_filtered[df_filtered["Type"].isin(st.session_state.type_select)]

    # ‡πÉ‡∏™‡πà CSS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á padding ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü Plotly
    st.markdown(
    """
    <style>
    /* ‡∏ã‡πà‡∏≠‡∏ô header ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á Streamlit */
    header[data-testid="stHeader"] {
        height: 0;
        visibility: hidden;
    }

    /* ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ */
    .block-container {
        padding-top: 3rem !important; /* ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°-‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */
        padding-bottom: 0rem;
        padding-left: 1rem;
        padding-right: 1rem;
        max-width: 100%;
    }

    /* ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á */
    .stPlotlyChart {
        padding: 0;
        margin: 0;
    }
    </style>
    """,
    unsafe_allow_html=True
)

    # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
    ticker_text = "üí∞ Total Sales: 122,514,235.94 Baht | üîß Service Income: 13,261,974.92 Baht | üìä Gross Profit: 71,134,994.72 Baht | üíµ Net Profit: 28,395,755.62 Baht"

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡∏ß‡∏≤‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢
    st.markdown(f"""
    <marquee behavior="scroll" direction="left" scrollamount="6" style="color:#2e86c1;font-size:20px;font-weight:bold;">
        {ticker_text}
    </marquee>
    """, unsafe_allow_html=True)

    
    # ‚úÖ ‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏ô ‡πÅ‡∏•‡∏∞ ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡πÅ‡∏ö‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤)
    col1, col2 = st.columns(2)

    # ‚úÖ ‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏ô (GP)
    if "GP" in df_filtered.columns:
        gp_amount = df_filtered.groupby(["MonthYear", "SortKey"])["GP"].sum().reset_index()
        gp_amount = gp_amount.sort_values("SortKey", ascending=True)

    with col1:
        st.markdown("### üí∞ GROSS PROFIT")
        fig_gp_amount = px.line(gp_amount, x="MonthYear", y="GP", markers=True)
        fig_gp_amount.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig_gp_amount, use_container_width=True)

        total_gp = gp_amount["GP"].sum()
        


    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (Net Profit)
        df_filtered["Net_Profit"] = (
        df_filtered["Sales_Income"].fillna(0) +
        df_filtered["Service_Income"].fillna(0) +
        df_filtered["Other_Income"].fillna(0) -
        (
        df_filtered["CGS"].fillna(0) +
        df_filtered["Sales_Exp"].fillna(0) +
        df_filtered["MA_Exp"].fillna(0) +
        df_filtered["GA_Exp"].fillna(0) +
        df_filtered["FA_Exp"].fillna(0) +
        df_filtered["Taxes_Exp"].fillna(0)
        )
    )
    
    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    net_month = df_filtered.groupby(["MonthYear", "SortKey"])["Net_Profit"].sum().reset_index()
    net_month = net_month.sort_values("SortKey")

    with col2:
        st.markdown("### üìâ NET PROFIT")
        fig_net = px.line(net_month, x="MonthYear", y="Net_Profit", markers=True, color_discrete_sequence=["#006400"])
        fig_net.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig_net, use_container_width=True)

        total_net = net_month["Net_Profit"].sum()
        
    

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î
    sales_total = df_filtered["Sales_Income"].sum()
    service_total = df_filtered["Service_Income"].sum() if "Service_Income" in df_filtered.columns else 0
    gp_total = df_filtered["GP"].sum() if "GP" in df_filtered.columns else 0

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    sales_total = df_filtered["Sales_Income"].sum()
    service_total = df_filtered["Service_Income"].sum()
    total_income = sales_total + service_total

    # ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DataFrame ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
    total_income_data = pd.DataFrame({
        "Category": ["Total Sales Income", "Total Service Income"],
        "Amount": [sales_total, service_total]
    })
    fig_income_pie = px.pie(
    total_income_data,
    names="Category",
    values="Amount",
    title="ü•ß Total Income Distribution",
    color_discrete_sequence=["#003366", "#0055AA"]  # ‚úÖ ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°
)

    # ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DataFrame ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
    expenses_data = {
        "Category": ["CGS", "Sales Expenses", "Management Expenses", "General Expenses", "Fixed Asset Expenses", "Taxes Expenses"],
        "Amount": [
            df_filtered["CGS"].sum() if "CGS" in df_filtered.columns else 0,
            df_filtered["Sales_Exp"].sum() if "Sales_Exp" in df_filtered.columns else 0,
            df_filtered["MA_Exp"].sum() if "MA_Exp" in df_filtered.columns else 0,
            df_filtered["GA_Exp"].sum() if "GA_Exp" in df_filtered.columns else 0,
            df_filtered["FA_Exp"].sum() if "FA_Exp" in df_filtered.columns else 0,
            df_filtered["Taxes_Exp"].sum() if "Taxes_Exp" in df_filtered.columns else 0
        ]
    }
    expenses_df = pd.DataFrame(expenses_data)
    fig_expenses_pie = px.pie(
    expenses_df,
    names="Category",
    values="Amount",
    title="üí∏ Total Expenses Distribution",
    color_discrete_sequence=["#CC5500", "#FF6600", "#FF9933", "#D2691E", "#A0522D", "#8B4513"]
)

    # ‚úÖ ‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üìä TOTAL INCOME DISTRIBUTION")
        st.plotly_chart(fig_income_pie, use_container_width=True)

    with col2:
        st.markdown("### üí∏ TOTAL EXPENSES DISTRIBUTION")
        st.plotly_chart(fig_expenses_pie, use_container_width=True)

    # ‚úÖ ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤
    col1, col2 = st.columns(2)

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    sales_month = df_filtered.groupby(["MonthYear", "SortKey"])["Sales_Income"].sum().reset_index()
    sales_month = sales_month.sort_values("SortKey", ascending=True)

    with col1:
        st.markdown("### üì¶ SALES INCOME")
        
        fig1_bar = px.bar(sales_month, x="MonthYear", y="Sales_Income", title="üìä Sales")
        fig1_pie = px.pie(sales_month, values="Sales_Income", names="MonthYear", title="ü•ß Sales")

        
        st.plotly_chart(fig1_bar, use_container_width=True)
        st.plotly_chart(fig1_pie, use_container_width=True)


    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    if "Service_Income" in df_filtered.columns:
        service_month = df_filtered.groupby(["MonthYear", "SortKey"])["Service_Income"].sum().reset_index()
        service_month = service_month.sort_values("SortKey", ascending=True)

    with col2:
        st.markdown("### üßæ SERVICES INCOME")
        
        fig2_bar = px.bar(service_month, x="MonthYear", y="Service_Income", title="üìä Services",color_discrete_sequence=["#006400"])
        fig2_pie = px.pie(service_month, values="Service_Income", names="MonthYear", title="ü•ß Services")

        
        st.plotly_chart(fig2_bar, use_container_width=True)
        st.plotly_chart(fig2_pie, use_container_width=True)

    # ‚úÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel
    st.markdown("### üì• Download Excel")
    excel_buffer = BytesIO()
    with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
        df_filtered.to_excel(writer, index=False, sheet_name='Filtered Data')
        sales_month.to_excel(writer, index=False, sheet_name='Sales Monthly')
        service_month.to_excel(writer, index=False, sheet_name='Service Monthly')
        gp_amount.to_excel(writer, index=False, sheet_name='GP Monthly')
        net_month.to_excel(writer, index=False, sheet_name='Net Profit Monthly')
    excel_buffer.seek(0)
    st.download_button(
        label="üì• Download Excel",
        data=excel_buffer,
        file_name="business_performance.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # ‡πÉ‡∏™‡πà‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
st.markdown(
    """
    <style>
    .stApp {
        background-color: #E7F2FD;  /* ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô */
    }
    </style>
    """,
    unsafe_allow_html=True
)
# ‡πÉ‡∏™‡πà CSS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á padding ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü Plotly
st.markdown(
    """
    <style>
    .plotly-container {
        padding: 10px;  /* ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á padding ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü Plotly */
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π admin ‡∏ñ‡πâ‡∏≤ role ‡∏Ñ‡∏∑‡∏≠ 'admin'
if st.session_state.get("role") == "admin":
        st.sidebar.page_link("pages/5_Admin.py", label="üõ°Ô∏è Admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")