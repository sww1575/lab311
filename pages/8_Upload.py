import streamlit as st
import pandas as pd
from sqlalchemy import text
import sys, os



# ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á utils/
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'utils')))
from auth_utils import engine  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ engine ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

st.set_page_config(page_title="üì§ Upload CSV to PostgreSQL", layout="wide")
st.title("üì§ Upload CSV to PostgreSQL")

uploaded_file = st.file_uploader("Upload your CSV file", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)

    st.subheader("üîç Preview Data")
    st.dataframe(df)

    table_name = st.text_input("Enter table name to insert data", value="VHAB1")

    if st.button("üì• Upload to Database"):
        try:
            with engine.connect() as conn:
                # ‚úÖ ‡∏î‡∏∂‡∏á Primary Keys ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                query = f'''
                    SELECT "Dept_Code", "Year", "Month", "Type"
                    FROM "{table_name}"
                '''
                existing = pd.read_sql(query, conn)

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
            existing_keys = set(tuple(x) for x in existing[["Dept_Code", "Year", "Month", "Type"]].values)
            df["__key__"] = df.apply(lambda x: (x["Dept_Code"], int(x["Year"]), x["Month"], x["Type"]), axis=1)

            # ‚úÖ ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà
            df_duplicate = df[df["__key__"].isin(existing_keys)]
            df_new = df[~df["__key__"].isin(existing_keys)].drop(columns="__key__")

            if not df_duplicate.empty:
                st.warning(f"‚ö†Ô∏è ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(df_duplicate)} ‡πÅ‡∏ñ‡∏ß ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ã‡πâ‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ")
                st.dataframe(df_duplicate)

            if df_new.empty:
                st.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ã‡πâ‡∏≥)")
            else:
                df_new.to_sql(table_name, engine, if_exists="append", index=False, method="multi")
                st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {len(df_new)} ‡πÅ‡∏ñ‡∏ß‡πÑ‡∏õ‡∏¢‡∏±‡∏á `{table_name}`")

        except Exception as e:
            st.error(f"‚ùå Upload failed: {e}")

st.markdown("""
<style>
/* --- Main Background --- */
.stApp {
    background: linear-gradient(135deg, #726bca 0%, #d1d8fd 50%, #5aa0f7 100%) !important;
}
/* --- Sidebar Background --- */
section[data-testid="stSidebar"] {
    background: linear-gradient(120deg, #43168d 0%, #273585 70%, #3e87f7 100%) !important;
    min-width: 250px !important;
    border-right: 3px solid #7a4cff22;
    box-shadow: 8px 0 24px -16px #20206044;
}
/* --- Sidebar Text --- */
section[data-testid="stSidebar"] * {
    color: #fff !important;
    font-size: 18px !important;
}
section[data-testid="stSidebar"] a:hover {
    color: #ffe268 !important;
}
/* --- Sidebar Active --- */
section[data-testid="stSidebar"] .css-17lntkn,
section[data-testid="stSidebar"] .css-1v0mbdj,
section[data-testid="stSidebar"] .css-1c7y2kd,
section[data-testid="stSidebar"] .css-16idsys {
    background-color: #7a4cff !important;
    color: #ffe268 !important;
    font-weight: bold !important;
    border-radius: 8px !important;
}
</style>
""", unsafe_allow_html=True)